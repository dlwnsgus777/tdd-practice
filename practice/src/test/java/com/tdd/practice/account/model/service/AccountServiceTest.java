package com.tdd.practice.account.model.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import com.tdd.practice.account.infra.AccountRepository;
import com.tdd.practice.account.model.domain.Account;
import com.tdd.practice.account.model.service.out.AccountDto;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;

public class AccountServiceTest {
	private AccountRepository accountRepository = new FakeAccountRepository();
	private AccountService accountService;

	@BeforeEach
	void setUp() {
		accountService = new AccountServiceImpl(accountRepository);
	}

	@Test
	@DisplayName("이메일을 통해 회원을 조회할 수 있다")
	public void findByEmailTest(){
		// GIVEN
		String email = "test@test.com";
		accountRepository.save(Account.builder().email(email).build());

		// WHEN
		Optional<AccountDto> result = accountService.findByEmail(email);

		// THEN
		assertThat(result.isPresent()).isTrue();
	}

	public static class FakeAccountRepository implements AccountRepository {
		private final AtomicLong autoGeneratedId = new AtomicLong(0);
		private final List<Account> data = Collections.synchronizedList(new ArrayList<>());

		@Override
		public Optional<Account> findByEmail(String email) {
			return data.stream().filter(item -> item.getEmail().equals(email)).findAny();
		}

		@Override
		public Account save(Account account) {
			if (account.getId() == null || account.getId() == 0) {
				Account newAccount = new Account(
						autoGeneratedId.incrementAndGet(),
						account.getEmail(),
						account.getPassword()
				);
				data.add(newAccount);
				return newAccount;
			} else {
				data.removeIf(item -> Objects.equals(item.getId(), account.getId()));
				data.add(account);
				return account;
			}
		}

	}
}